// go中采用包的形式来组织代码，一个可运行的程序需要有一个main包和一个main函数
// 与Java不同的是，Go中没有class的概念，基本的代码组织单元是包，同一个包的成员(变量/函数)，即使是在不同文件下也可以访问
package main

import "fmt"

var GlobalVar = 10 // 全面变量命名,Go采用判断首字母的方式获取可见性，首字母大写即表示全局变量

func getVars() (var1, var2 string) {
	return "1", "2"
}
func main() {
	/****************************变量声明******************************/

	var v1 int //基础变量命名方式  var 变量名 变量类型 遵守驼峰命名法 如用户名：userName
	var (      //变量批量命名
		v2 int
		v3 int
	)
	fmt.Println(v1, v2, v3) //此时，在变量声明后，不手动初始化会赋默认值，int类型的初始化值为0

	/****************************变量初始化******************************/

	var v4 int = 10 //初始化并赋值
	var v5 = 10     //省略类型的写法，由赋予的值推断类型，值的类型必须确定，不能存在歧义
	v6 := 10        // 省略var，值推导类型
	fmt.Println(v4, v5, v6)

	/****************************变量赋值******************************/

	var f1 int      //声明
	f1 = 10         //赋值
	var f2, f3 int  //声明
	f2, f3 = 1, 2   //多重赋值  即变量位置与赋值符号后的值一一对应即可
	f2, f3 = f3, f2 //使用多重赋值交换变量   todo 为什么可以直接交换变量？未深究
	fmt.Println(f1, f2, f3)

	/****************************匿名变量******************************/

	_, var2 := getVars() //匿名变量通过_来声明,任何赋予它的值都会被直接丢弃，_还有许多其他的用法，比如引用包时希望加载包的init，又不使用包里的任何成员等
	fmt.Println(var2)

	/****************************变量的作用域******************************/

	//每个变量在程序中可以使用的范围，被称为作用域
	//在函数内声明的变量只能在函数内使用
	//在函数外声明的变量可以在一个包下使用，如果需要在其他包使用，需要将首字母大写

}
